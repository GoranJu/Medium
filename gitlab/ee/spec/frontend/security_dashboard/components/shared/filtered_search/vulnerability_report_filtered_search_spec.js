import { GlFilteredSearch } from '@gitlab/ui';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import FilteredSearch from 'ee/security_dashboard/components/shared/filtered_search/vulnerability_report_filtered_search.vue';
import StatusToken from 'ee/security_dashboard/components/shared/filtered_search/tokens/status_token.vue';
import ActivityToken from 'ee/security_dashboard/components/shared/filtered_search/tokens/activity_token.vue';
import {
  STATUS_TOKEN_DEFINITION,
  ACTIVITY_TOKEN_DEFINITION,
  SEVERITY_TOKEN_DEFINITION,
  TOOL_VENDOR_TOKEN_DEFINITION,
  IMAGE_TOKEN_DEFINITION,
  PROJECT_TOKEN_DEFINITION,
  IDENTIFIER_TOKEN_DEFINITION,
} from 'ee/security_dashboard/components/shared/filtered_search/tokens/constants';
import { FILTERS } from 'ee/security_dashboard/components/shared/vulnerability_report/constants';
import eventHub from 'ee/security_dashboard/components/shared/filtered_search/event_hub';

describe('Vulnerability Report Filtered Search component', () => {
  let wrapper;

  const findFilteredSearchComponent = () => wrapper.findComponent(GlFilteredSearch);

  const createWrapper = ({
    query = {},
    availableFilters = [],
    toolFilterType = 'scanner',
    glFeatures = {},
  } = {}) => {
    wrapper = shallowMountExtended(FilteredSearch, {
      propsData: {
        availableFilters,
      },
      provide: {
        scanners: [],
        toolFilterType,
        glFeatures,
      },
      mocks: {
        $route: {
          query,
        },
      },
    });
  };

  describe('with empty query parameters', () => {
    beforeEach(() => {
      createWrapper();
    });

    it('should mount the component with the correct config', () => {
      const filteredSearch = findFilteredSearchComponent();

      expect(filteredSearch.props('placeholder')).toEqual('Search or filter vulnerabilities...');
      expect(filteredSearch.props('termsAsTokens')).toBe(false);
      expect(filteredSearch.props('value')).toEqual([
        {
          type: 'state',
          value: {
            data: StatusToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
        {
          type: 'activity',
          value: {
            data: ActivityToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
      ]);
    });

    it.each`
      name                                        | availableFilters                                           | availableTokens
      ${'status and activity'}                    | ${[FILTERS.STATUS, FILTERS.ACTIVITY]}                      | ${[STATUS_TOKEN_DEFINITION, ACTIVITY_TOKEN_DEFINITION]}
      ${'status, activity, and severity'}         | ${[FILTERS.STATUS, FILTERS.ACTIVITY, FILTERS.SEVERITY]}    | ${[STATUS_TOKEN_DEFINITION, ACTIVITY_TOKEN_DEFINITION, SEVERITY_TOKEN_DEFINITION]}
      ${'status, activity, and tool with vendor'} | ${[FILTERS.STATUS, FILTERS.ACTIVITY, FILTERS.TOOL_VENDOR]} | ${[STATUS_TOKEN_DEFINITION, ACTIVITY_TOKEN_DEFINITION, TOOL_VENDOR_TOKEN_DEFINITION]}
      ${'status, activity, and image'}            | ${[FILTERS.STATUS, FILTERS.ACTIVITY, FILTERS.IMAGE]}       | ${[STATUS_TOKEN_DEFINITION, ACTIVITY_TOKEN_DEFINITION, IMAGE_TOKEN_DEFINITION]}
      ${'status, activity, and identifier'}       | ${[FILTERS.STATUS, FILTERS.ACTIVITY, FILTERS.IDENTIFIER]}  | ${[STATUS_TOKEN_DEFINITION, ACTIVITY_TOKEN_DEFINITION, IDENTIFIER_TOKEN_DEFINITION]}
      ${'status, activity, project'}              | ${[FILTERS.STATUS, FILTERS.ACTIVITY, FILTERS.PROJECT]}     | ${[STATUS_TOKEN_DEFINITION, ACTIVITY_TOKEN_DEFINITION, PROJECT_TOKEN_DEFINITION]}
    `(
      `passes the expected available tokens for filters '$name'`,
      ({ availableFilters, availableTokens }) => {
        createWrapper({
          availableFilters,
          glFeatures: { vulnerabilityFilteringByIdentifierGroup: true },
        });

        expect(findFilteredSearchComponent().props('availableTokens')).toEqual(availableTokens);
      },
    );

    it('should propagate when event hub emits a `filters-changed` event', () => {
      const eventObj = { state: ['DISMISSED'] };
      eventHub.$emit('filters-changed', eventObj);
      expect(wrapper.emitted('filters-changed')).toEqual([[eventObj]]);
    });

    it('should persist filters when called multiple times', () => {
      eventHub.$emit('filters-changed', { state: ['DISMISSED'] });
      eventHub.$emit('filters-changed', { severity: ['LOW'] });

      expect(wrapper.emitted('filters-changed')).toEqual([
        [{ state: ['DISMISSED'] }],
        [{ state: ['DISMISSED'], severity: ['LOW'] }],
      ]);
    });

    it('should emit empty filters on clear', () => {
      eventHub.$emit('filters-changed', { state: ['DISMISSED'] });
      findFilteredSearchComponent().vm.$emit('clear');
      expect(wrapper.emitted('filters-changed')).toEqual([[{ state: ['DISMISSED'] }], [{}]]);
    });
  });

  describe('with non-empty query parameters', () => {
    beforeEach(() => {
      createWrapper({ query: { severity: 'MEDIUM,LOW', scanner: 'gitlab-api-fuzzing' } });
    });

    it('should pass route parameters to the tokens', () => {
      expect(findFilteredSearchComponent().props('value')).toEqual([
        {
          type: 'state',
          value: {
            data: StatusToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
        {
          type: 'activity',
          value: {
            data: ActivityToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
        {
          type: 'severity',
          value: {
            data: ['MEDIUM', 'LOW'],
            operator: '||',
          },
        },
        {
          type: 'scanner',
          value: {
            data: ['gitlab-api-fuzzing'],
            operator: '||',
          },
        },
      ]);
    });
  });

  describe('when vulnerabilityFilteringByIdentifierGroup feature flag is on', () => {
    beforeEach(() => {
      createWrapper({
        availableFilters: [FILTERS.STATUS, FILTERS.ACTIVITY, FILTERS.PROJECT, FILTERS.IDENTIFIER],
        query: {
          identifier: 'cve-test',
        },
        glFeatures: {
          vulnerabilityFilteringByIdentifierGroup: true,
        },
      });
    });

    it('includes identifier token in available tokens', () => {
      expect(findFilteredSearchComponent().props('availableTokens')).toEqual([
        STATUS_TOKEN_DEFINITION,
        ACTIVITY_TOKEN_DEFINITION,
        PROJECT_TOKEN_DEFINITION,
        IDENTIFIER_TOKEN_DEFINITION,
      ]);
    });

    it('should pass route parameters to the identifier token', () => {
      expect(findFilteredSearchComponent().props('value')).toEqual([
        {
          type: 'state',
          value: {
            data: StatusToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
        {
          type: 'activity',
          value: {
            data: ActivityToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
        {
          type: 'identifier',
          value: {
            data: ['cve-test'],
            operator: '=',
          },
        },
      ]);
    });
  });
});
