import { GlLink, GlAlert, GlCollapsibleListbox, GlSprintf } from '@gitlab/ui';
import Vue, { nextTick } from 'vue';
import VueApollo from 'vue-apollo';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import {
  DASHBOARD_TYPE_GROUP,
  DASHBOARD_TYPE_PROJECT,
  DASHBOARD_TYPE_INSTANCE,
  DASHBOARD_TYPE_PIPELINE,
} from 'ee/security_dashboard/constants';
import SelectionSummary from 'ee/security_dashboard/components/shared/vulnerability_report/selection_summary.vue';
import BulkChangeStatus from 'ee/security_dashboard/components/shared/vulnerability_report/bulk_change_status.vue';
import AttachExistingIssue from 'ee/security_dashboard/components/shared/vulnerability_report/attach_existing_issue.vue';
import BulkChangeSeverity from 'ee/security_dashboard/components/shared/vulnerability_report/bulk_change_severity.vue';

Vue.use(VueApollo);

const mockVulnerabilities = {
  single: [{ id: 'gid://gitlab/Vulnerability/54' }],
  multiple: [
    { id: 'gid://gitlab/Vulnerability/54' },
    { id: 'gid://gitlab/Vulnerability/56' },
    { id: 'gid://gitlab/Vulnerability/58' },
  ],
  rejected: [{ id: 'gid://gitlab/Vulnerability/54' }, { id: 'gid://gitlab/Vulnerability/56' }],
};

describe('Selection Summary component', () => {
  let wrapper;

  const findGlAlert = () => wrapper.findComponent(GlAlert);
  const findSelectedVulnerabilities = () => wrapper.findByTestId('selected-vulnerabilities');
  const findActionListbox = () => wrapper.findComponent(GlCollapsibleListbox);
  const findBulkChangeStatus = () => wrapper.findComponent(BulkChangeStatus);
  const findAttachExistingIssue = () => wrapper.findComponent(AttachExistingIssue);
  const findBulkChangeSeverity = () => wrapper.findComponent(BulkChangeSeverity);

  const selectAction = async (action) => {
    findActionListbox().vm.$emit('select', action);
    await nextTick();
  };

  const createComponent = ({
    selectedVulnerabilities = [],
    enhancedVulnerabilityBulkActions = true,
    dashboardType = DASHBOARD_TYPE_PROJECT,
    vulnerabilitySeverityOverride = true,
  } = {}) => {
    wrapper = shallowMountExtended(SelectionSummary, {
      stubs: {
        GlAlert,
        GlSprintf,
        GlLink,
      },
      propsData: {
        selectedVulnerabilities,
      },
      provide: {
        glFeatures: {
          enhancedVulnerabilityBulkActions,
          vulnerabilitySeverityOverride,
        },
        dashboardType,
      },
    });
  };

  describe('with 1 vulnerability selected', () => {
    beforeEach(() => {
      createComponent({ selectedVulnerabilities: mockVulnerabilities.single });
    });

    it('displays correct selection count', () => {
      expect(findSelectedVulnerabilities().text()).toBe('1 Selected');
    });

    it('shows action listbox with correct options', () => {
      expect(findActionListbox().exists()).toBe(true);
      expect(findActionListbox().props('items')).toEqual([
        { value: 'status', text: 'Change status' },
        { value: 'severity', text: 'Change severity' },
        { value: 'attach_existing', text: 'Attach to existing issue' },
      ]);
    });

    it('hides bulk change status component initially', () => {
      expect(findBulkChangeStatus().exists()).toBe(false);
    });
  });

  describe('with multiple vulnerabilities selected', () => {
    beforeEach(() => {
      createComponent({ selectedVulnerabilities: mockVulnerabilities.multiple });
    });

    it('displays correct selection count', () => {
      expect(findSelectedVulnerabilities().text()).toBe('3 Selected');
    });
  });

  describe('bulk status changes', () => {
    beforeEach(() => {
      createComponent({ selectedVulnerabilities: mockVulnerabilities.single });
      selectAction('status');
    });

    it('shows bulk change status component after selecting status action', () => {
      expect(findBulkChangeStatus().exists()).toBe(true);
      expect(findAttachExistingIssue().exists()).toBe(false);
      expect(findBulkChangeStatus().props()).toEqual({
        selectedVulnerabilities: mockVulnerabilities.single,
      });
    });

    it('emits vulnerabilities-updated event correctly', () => {
      const updatedVulnerabilities = [1];
      findBulkChangeStatus().vm.$emit('vulnerabilities-updated', updatedVulnerabilities);
      expect(wrapper.emitted('vulnerabilities-updated')).toEqual([[updatedVulnerabilities]]);
    });
  });

  describe('bulk severity changes', () => {
    beforeEach(() => {
      createComponent({ selectedVulnerabilities: mockVulnerabilities.single });
      selectAction('severity');
    });

    it('shows bulk change severity component after selecting severity action', () => {
      expect(findBulkChangeSeverity().exists()).toBe(true);
      expect(findAttachExistingIssue().exists()).toBe(false);
      expect(findBulkChangeSeverity().props()).toEqual({
        selectedVulnerabilities: mockVulnerabilities.single,
      });
    });
  });

  describe('attach existing issue', () => {
    beforeEach(() => {
      createComponent({ selectedVulnerabilities: mockVulnerabilities.single });
      selectAction('attach_existing');
    });

    it('shows attach existing issue component after selecting "attach_existing" action', () => {
      expect(findBulkChangeStatus().exists()).toBe(false);
      expect(findAttachExistingIssue().exists()).toBe(true);
      expect(findAttachExistingIssue().props()).toEqual({
        selectedVulnerabilities: mockVulnerabilities.single,
      });
    });

    it('emits vulnerabilities-updated event correctly', () => {
      const updatedVulnerabilities = [1];
      findAttachExistingIssue().vm.$emit('vulnerabilities-updated', updatedVulnerabilities);
      expect(wrapper.emitted('vulnerabilities-updated')).toEqual([[updatedVulnerabilities]]);
    });
  });

  describe.each`
    action               | findFn
    ${'status'}          | ${findBulkChangeStatus}
    ${'attach_existing'} | ${findAttachExistingIssue}
  `('rejected vulnerabilities handling for $action', ({ action, findFn }) => {
    beforeEach(() => {
      createComponent({ selectedVulnerabilities: mockVulnerabilities.multiple });
      selectAction(action);
    });

    it('displays alert with rejected vulnerability IDs', async () => {
      findFn().vm.$emit('update-rejected', mockVulnerabilities.rejected);
      await nextTick();
      expect(findGlAlert().text()).toMatchInterpolatedText(
        'Failed updating vulnerabilities with the following IDs: 54, 56',
      );
    });

    it('clears alert and emits cancel event when cancelled', async () => {
      findFn().vm.$emit('update-rejected', mockVulnerabilities.rejected);
      findFn().vm.$emit('cancel');
      await nextTick();

      expect(findGlAlert().exists()).toBe(false);
      expect(wrapper.emitted('cancel-selection')).toHaveLength(1);
    });

    it(`clears alert when 'clear-rejected' event is emitted`, async () => {
      findFn().vm.$emit('update-rejected', mockVulnerabilities.rejected);
      await nextTick();
      expect(findGlAlert().exists()).toBe(true);
      findFn().vm.$emit('clear-rejected');
      await nextTick();
      expect(findGlAlert().exists()).toBe(false);
    });
  });

  describe('with enhancedVulnerabilityBulkActions disabled', () => {
    beforeEach(() => {
      createComponent({
        selectedVulnerabilities: mockVulnerabilities.single,
        enhancedVulnerabilityBulkActions: false,
      });
    });

    it('does not render `Attach to existing issue` action in listbox', () => {
      expect(findActionListbox().exists()).toBe(true);
      expect(findActionListbox().props('items')).toEqual([
        { value: 'status', text: 'Change status' },
        { value: 'severity', text: 'Change severity' },
      ]);
      expect(findAttachExistingIssue().exists()).toBe(false);
      expect(findBulkChangeStatus().exists()).toBe(false);
      expect(findBulkChangeSeverity().exists()).toBe(false);
    });
  });

  describe('with vulnerabilitySeverityOverride disabled', () => {
    beforeEach(() => {
      createComponent({
        selectedVulnerabilities: mockVulnerabilities.single,
        vulnerabilitySeverityOverride: false,
      });
    });

    it('does not render `Change severity` action in listbox', () => {
      expect(findActionListbox().exists()).toBe(true);
      expect(findActionListbox().props('items')).toEqual([
        { value: 'status', text: 'Change status' },
        { value: 'attach_existing', text: 'Attach to existing issue' },
      ]);
      expect(findBulkChangeSeverity().exists()).toBe(false);
      expect(findBulkChangeStatus().exists()).toBe(false);
      expect(findAttachExistingIssue().exists()).toBe(false);
    });
  });

  describe.each`
    dashboardType              | expected
    ${DASHBOARD_TYPE_PROJECT}  | ${true}
    ${DASHBOARD_TYPE_GROUP}    | ${true}
    ${DASHBOARD_TYPE_INSTANCE} | ${false}
    ${DASHBOARD_TYPE_PIPELINE} | ${false}
  `(`when dashboardType is $dashboardType`, ({ dashboardType, expected }) => {
    beforeEach(() => {
      createComponent({
        selectedVulnerabilities: mockVulnerabilities.single,
        dashboardType,
        vulnerabilitySeverityOverride: false,
        enhancedVulnerabilityBulkActions: true,
      });
    });

    it(`${expected ? 'shows' : 'does not show'} the action dropdown`, () => {
      expect(findActionListbox().exists()).toBe(expected);
    });
  });
});
