import { GlCollapsibleListbox, GlFormInput, GlFormGroup } from '@gitlab/ui';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import BulkChangeSeverity from 'ee/security_dashboard/components/shared/vulnerability_report/bulk_change_severity.vue';
import { SEVERITY_LEVELS } from 'ee/security_dashboard/constants';
import { SEVERITY_CLASS_NAME_MAP } from 'ee/vue_shared/security_reports/components/constants';

describe('Bulk Change severity component', () => {
  let wrapper;

  const findForm = () => wrapper.find('form');
  const findSeverityFormGroup = () => wrapper.findByTestId('severity-form-group');
  const findSeverityListbox = () => wrapper.findByTestId('severity-listbox');
  const findListboxItem = (id) => wrapper.findByTestId(`listbox-item-${id}`);
  const findCommentFormGroup = () => wrapper.findByTestId('comment-form-group');
  const findCommentFormInput = () => wrapper.findComponent(GlFormInput);
  const findCancelButton = () => wrapper.findByTestId('cancel-button');
  const findSubmitButton = () => wrapper.find('[type="submit"]');
  const findIcon = (id) => wrapper.findByTestId(`severity-icon-${id}`);

  const selectSeverity = (severity) => {
    return findSeverityListbox().vm.$emit('select', severity);
  };

  const addComment = (comment) => {
    return findCommentFormInput().vm.$emit('input', comment);
  };

  const submitForm = async ({ state, comment } = {}) => {
    if (state) {
      await selectSeverity(state);
    }
    if (comment) {
      await addComment(comment);
    }
    return findForm().trigger('submit');
  };

  const createComponent = ({ selectedVulnerabilities = [] } = {}) => {
    wrapper = shallowMountExtended(BulkChangeSeverity, {
      stubs: {
        GlCollapsibleListbox,
        GlFormGroup,
      },
      propsData: {
        selectedVulnerabilities,
      },
    });
  };

  beforeEach(() => {
    createComponent();
  });

  it('renders correctly', () => {
    expect(findSeverityListbox().exists()).toBe(true);
    expect(findCommentFormGroup().exists()).toBe(true);
    expect(findCancelButton().exists()).toBe(true);
    expect(findSubmitButton().exists()).toBe(true);
    expect(findSubmitButton().attributes('disabled')).toBeUndefined();
    expect(findSubmitButton().classes('js-no-auto-disable')).toBe(true);
  });

  describe('severity listbox', () => {
    it('shows the placeholder text when no severity is selected', () => {
      expect(findSeverityListbox().props('toggleText')).toBe('Select severity');
    });

    it('shows expected items', () => {
      const states = Object.keys(SEVERITY_LEVELS);
      expect(findSeverityListbox().props('items')).toHaveLength(states.length);

      states.forEach((state) => {
        const itemText = findListboxItem(state).text();
        expect(itemText).toBe(itemText);
      });
    });

    it.each(Object.entries(SEVERITY_LEVELS))(
      'shows the expected text in the listbox button when %s is clicked',
      async (value, text) => {
        await selectSeverity(value);
        expect(findSeverityListbox().props('toggleText')).toBe(text);
      },
    );

    it.each(Object.entries(SEVERITY_LEVELS))(
      'shows the expected icon and icon color in the listbox button when %s is clicked',
      async (value) => {
        await selectSeverity(value);
        expect(findIcon(value).props('name')).toBe(`severity-${value}`);
        expect(findIcon(value).classes(SEVERITY_CLASS_NAME_MAP[value])).toBe(true);
      },
    );

    it('shows error message when submitting without severity', async () => {
      await findForm().trigger('submit');
      expect(findSeverityFormGroup().attributes('state')).toBeUndefined();
    });

    it('clears error message when selecting', async () => {
      await submitForm();
      expect(findSeverityFormGroup().attributes('state')).toBeUndefined();
      await selectSeverity('high');
      expect(findSeverityFormGroup().attributes('state')).toBeDefined();
    });
  });

  describe('comment input', () => {
    it.each(Object.entries(SEVERITY_LEVELS))(
      'renders after selecting severity %s',
      async (state) => {
        await selectSeverity(state);
        expect(findCommentFormInput().exists()).toBe(true);
      },
    );

    it('shows error message when submitting without comment', async () => {
      await selectSeverity('high');
      expect(findCommentFormGroup().attributes('state')).toBeDefined();
      await findForm().trigger('submit');
      expect(findCommentFormGroup().attributes('state')).toBeUndefined();
    });

    it('clears error message when adding comment', async () => {
      await submitForm({ state: 'high' });
      expect(findCommentFormGroup().attributes('state')).toBeUndefined();
      await addComment('test comment');
      expect(findCommentFormGroup().attributes('state')).toBeDefined();
    });
  });
});
