import { __, s__ } from '~/locale';
import {
  REPORT_TYPES_WITH_MANUALLY_ADDED,
  REPORT_TYPES_CONTAINER_SCANNING_FOR_REGISTRY,
} from 'ee/security_dashboard/constants';
import { REPORT_TYPE_CLUSTER_IMAGE_SCANNING } from '~/vue_shared/security_reports/constants';

export const FIELDS = {
  CHECKBOX: {
    key: 'checkbox',
    class: 'checkbox',
  },
  DETECTED: {
    key: 'detected',
    label: s__('Vulnerability|Detected'),
    class: 'detected',
    sortable: true,
  },
  STATUS: {
    key: 'state',
    label: s__('Vulnerability|Status'),
    class: 'status',
  },
  SEVERITY: {
    key: 'severity',
    label: s__('Vulnerability|Severity'),
    class: 'severity gl-text-nowrap',
    sortable: true,
  },
  DESCRIPTION: {
    key: 'title',
    label: __('Description'),
    class: 'description gl-break-all',
  },
  IDENTIFIER: {
    key: 'identifier',
    label: s__('Vulnerability|Identifier'),
    class: 'identifier gl-break-all',
  },
  TOOL: {
    key: 'reportType',
    label: s__('Reports|Tool'),
    class: 'scanner',
  },
  REPORT_TYPE: {
    key: 'reportType',
    label: s__('Reports|Report Type'),
    class: 'scanner',
  },
  CLUSTER: {
    key: 'cluster',
    label: s__('Vulnerability|Cluster'),
    thClass: 'gl-w-3/20',
    class: 'cluster gl-break-all',
  },
  ACTIVITY: {
    key: 'activity',
    label: s__('Vulnerability|Activity'),
    thAlignRight: true,
    class: 'activity',
  },
  IMAGE: {
    key: 'imageAndTag',
    label: s__('Vulnerability|Image and tag'),
    class: 'gl-max-w-0 gl-break-all',
  },
};

// These are used to identify which component should be rendered in vulnerability_filters.vue.
export const FILTERS = {
  STATUS: 'STATUS',
  PIPELINE_STATUS: 'PIPELINE_STATUS',
  SEVERITY: 'SEVERITY',
  ACTIVITY: 'ACTIVITY',
  IMAGE: 'IMAGE',
  TOOL_SIMPLE: 'TOOL_SIMPLE',
  TOOL_VENDOR: 'TOOL_VENDOR',
  TOOL_PIPELINE: 'TOOL_PIPELINE',
  PROJECT: 'PROJECT',
  CLUSTER: 'CLUSTER',
  IDENTIFIER: 'IDENTIFIER',
};

const BASE_FIELDS = {
  START: [FIELDS.DETECTED, FIELDS.STATUS, FIELDS.SEVERITY, FIELDS.DESCRIPTION],
  END: [FIELDS.ACTIVITY],
};

export const FIELD_PRESETS = {
  DEVELOPMENT: [...BASE_FIELDS.START, FIELDS.IDENTIFIER, FIELDS.REPORT_TYPE, ...BASE_FIELDS.END],
  DEVELOPMENT_LEGACY: [...BASE_FIELDS.START, FIELDS.IDENTIFIER, FIELDS.TOOL, ...BASE_FIELDS.END],
  OPERATIONAL: [...BASE_FIELDS.START, FIELDS.CLUSTER, ...BASE_FIELDS.END],
  AGENT: [...BASE_FIELDS.START, ...BASE_FIELDS.END],
  PIPELINE: [
    FIELDS.STATUS,
    FIELDS.SEVERITY,
    FIELDS.DESCRIPTION,
    FIELDS.IDENTIFIER,
    FIELDS.REPORT_TYPE,
    FIELDS.ACTIVITY,
  ],
  PIPELINE_LEGACY: [
    FIELDS.STATUS,
    FIELDS.SEVERITY,
    FIELDS.DESCRIPTION,
    FIELDS.IDENTIFIER,
    FIELDS.TOOL,
    FIELDS.ACTIVITY,
  ],
  CONTAINER_REGISTRY: [...BASE_FIELDS.START, FIELDS.IDENTIFIER, FIELDS.IMAGE, ...BASE_FIELDS.END],
};

const BASE_FILTERS = { START: [FILTERS.STATUS, FILTERS.SEVERITY], END: [FILTERS.ACTIVITY] };

export const FILTER_PRESETS = {
  DEVELOPMENT_PROJECT: [
    ...BASE_FILTERS.START,
    FILTERS.TOOL_VENDOR,
    FILTERS.IDENTIFIER,
    ...BASE_FILTERS.END,
  ],
  DEVELOPMENT: [
    ...BASE_FILTERS.START,
    FILTERS.TOOL_SIMPLE,
    FILTERS.PROJECT,
    FILTERS.IDENTIFIER,
    ...BASE_FILTERS.END,
  ],
  OPERATIONAL_PROJECT: [
    ...BASE_FILTERS.START,
    FILTERS.CLUSTER,
    FILTERS.IMAGE,
    FILTERS.IDENTIFIER,
    ...BASE_FILTERS.END,
  ],
  OPERATIONAL: [...BASE_FILTERS.START, FILTERS.PROJECT, ...BASE_FILTERS.END],
  AGENT: [...BASE_FILTERS.START, FILTERS.IMAGE, ...BASE_FILTERS.END],
  PIPELINE: [FILTERS.PIPELINE_STATUS, FILTERS.SEVERITY, FILTERS.TOOL_PIPELINE],
  CONTAINER_REGISTRY_PROJECT: [...BASE_FILTERS.START, FILTERS.IMAGE, ...BASE_FILTERS.END],
};

export const REPORT_TYPE_PRESETS = {
  DEVELOPMENT: Object.keys(REPORT_TYPES_WITH_MANUALLY_ADDED).map((type) => type.toUpperCase()),
  OPERATIONAL: [REPORT_TYPE_CLUSTER_IMAGE_SCANNING.toUpperCase()],
  CONTAINER_REGISTRY: Object.keys(REPORT_TYPES_CONTAINER_SCANNING_FOR_REGISTRY).map((type) =>
    type.toUpperCase(),
  ),
};
